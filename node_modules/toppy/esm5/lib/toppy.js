/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { DefaultConfig } from './config';
import { InsidePlacement } from './models';
import { GlobalPosition } from './position';
import { ToppyControl } from './toppy-control';
import { Bus, createId, getContent } from './utils';
import * as i0 from "@angular/core";
var Toppy = /** @class */ (function () {
    function Toppy(injector) {
        this.injector = injector;
        this.inputs = {
            position: null,
            config: DefaultConfig,
            content: { type: "s" /* STRING */, data: 'hello', props: {} },
            tid: null
        };
        this.inputs.position = new GlobalPosition({ placement: InsidePlacement.TOP });
    }
    /**
     * @param {?} position
     * @return {?}
     */
    Toppy.prototype.position = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.inputs.position = position;
        return this;
    };
    /**
     * @param {?} config
     * @return {?}
     */
    Toppy.prototype.config = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.inputs.config = tslib_1.__assign({}, DefaultConfig, config);
        return this;
    };
    /**
     * @param {?} data
     * @param {?=} props
     * @return {?}
     */
    Toppy.prototype.content = /**
     * @param {?} data
     * @param {?=} props
     * @return {?}
     */
    function (data, props) {
        if (props === void 0) { props = {}; }
        this.inputs.content = getContent(data, props);
        return this;
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    Toppy.prototype.create = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (key === void 0) { key = null; }
        this.tid = this.inputs.tid = key || createId();
        /** @type {?} */
        var injector = Injector.create([
            {
                provide: ToppyControl,
                deps: [ApplicationRef, ComponentFactoryResolver, Injector]
            }
        ], this.injector);
        /** @type {?} */
        var tc = injector.get(ToppyControl);
        if (Toppy.controls[this.tid]) {
            this.tid = createId();
        }
        this.inputs.position.init(this.tid);
        Toppy.controls[this.tid] = Object.assign(tc, this.inputs);
        return tc;
    };
    /**
     * @param {?} tid
     * @return {?}
     */
    Toppy.prototype.getCtrl = /**
     * @param {?} tid
     * @return {?}
     */
    function (tid) {
        return Toppy.controls[tid];
    };
    /**
     * @return {?}
     */
    Toppy.prototype.destroy = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:forin
        for (var key in Toppy.controls) {
            Toppy.controls[key].close();
        }
        Toppy.controls = {};
        Bus.stop();
    };
    Toppy.controls = {};
    Toppy.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    Toppy.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ Toppy.ngInjectableDef = i0.defineInjectable({ factory: function Toppy_Factory() { return new Toppy(i0.inject(i0.INJECTOR)); }, token: Toppy, providedIn: "root" });
    return Toppy;
}());
export { Toppy };
if (false) {
    /** @type {?} */
    Toppy.controls;
    /**
     * @type {?}
     * @private
     */
    Toppy.prototype.tid;
    /**
     * @type {?}
     * @private
     */
    Toppy.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    Toppy.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wcHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b3BweS8iLCJzb3VyY2VzIjpbImxpYi90b3BweS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFBa0QsZUFBZSxFQUFvQixNQUFNLFVBQVUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTVDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBRXBEO0lBYUUsZUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVA5QixXQUFNLEdBQVc7WUFDdkIsUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsYUFBYTtZQUNyQixPQUFPLEVBQUUsRUFBRSxJQUFJLGtCQUFvQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMvRCxHQUFHLEVBQUUsSUFBSTtTQUNWLENBQUM7UUFHQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNoRixDQUFDOzs7OztJQUVELHdCQUFROzs7O0lBQVIsVUFBUyxRQUF1QjtRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELHNCQUFNOzs7O0lBQU4sVUFBTyxNQUE0QjtRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sd0JBQVEsYUFBYSxFQUFLLE1BQU0sQ0FBRSxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBRUQsdUJBQU87Ozs7O0lBQVAsVUFBUSxJQUFpQixFQUFFLEtBQXdCO1FBQXhCLHNCQUFBLEVBQUEsVUFBd0I7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsc0JBQU07Ozs7SUFBTixVQUFPLEdBQWtCO1FBQWxCLG9CQUFBLEVBQUEsVUFBa0I7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7O1lBRXpDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUM5QjtZQUNFO2dCQUNFLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsd0JBQXdCLEVBQUUsUUFBUSxDQUFDO2FBQzNEO1NBQ0YsRUFDRCxJQUFJLENBQUMsUUFBUSxDQUNkOztZQUVLLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztRQUNyQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxFQUFFLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7O0lBRUQsdUJBQU87Ozs7SUFBUCxVQUFRLEdBQVE7UUFDZCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHVCQUFPOzs7SUFBUDtRQUNFLGlDQUFpQztRQUNqQyxLQUFLLElBQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDaEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM3QjtRQUNELEtBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNiLENBQUM7SUE3RE0sY0FBUSxHQUFvQyxFQUFFLENBQUM7O2dCQUp2RCxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQVY4RCxRQUFROzs7Z0JBQXZFO0NBMEVDLEFBbEVELElBa0VDO1NBL0RZLEtBQUs7OztJQUNoQixlQUFzRDs7Ozs7SUFDdEQsb0JBQWlCOzs7OztJQUNqQix1QkFLRTs7Ozs7SUFFVSx5QkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGVmYXVsdENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IENvbnRlbnREYXRhLCBDb250ZW50UHJvcHMsIENvbnRlbnRUeXBlLCBJbnB1dHMsIEluc2lkZVBsYWNlbWVudCwgVElELCBUb3BweUNvbmZpZyB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IEdsb2JhbFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbic7XG5pbXBvcnQgeyBUb3BweVBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi9wb3NpdGlvbic7XG5pbXBvcnQgeyBUb3BweUNvbnRyb2wgfSBmcm9tICcuL3RvcHB5LWNvbnRyb2wnO1xuaW1wb3J0IHsgQnVzLCBjcmVhdGVJZCwgZ2V0Q29udGVudCB9IGZyb20gJy4vdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUb3BweSB7XG4gIHN0YXRpYyBjb250cm9sczogeyBba2V5OiBzdHJpbmddOiBUb3BweUNvbnRyb2wgfSA9IHt9O1xuICBwcml2YXRlIHRpZDogVElEO1xuICBwcml2YXRlIGlucHV0czogSW5wdXRzID0ge1xuICAgIHBvc2l0aW9uOiBudWxsLFxuICAgIGNvbmZpZzogRGVmYXVsdENvbmZpZyxcbiAgICBjb250ZW50OiB7IHR5cGU6IENvbnRlbnRUeXBlLlNUUklORywgZGF0YTogJ2hlbGxvJywgcHJvcHM6IHt9IH0sXG4gICAgdGlkOiBudWxsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLmlucHV0cy5wb3NpdGlvbiA9IG5ldyBHbG9iYWxQb3NpdGlvbih7IHBsYWNlbWVudDogSW5zaWRlUGxhY2VtZW50LlRPUCB9KTtcbiAgfVxuXG4gIHBvc2l0aW9uKHBvc2l0aW9uOiBUb3BweVBvc2l0aW9uKTogVG9wcHkge1xuICAgIHRoaXMuaW5wdXRzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25maWcoY29uZmlnOiBQYXJ0aWFsPFRvcHB5Q29uZmlnPik6IFRvcHB5IHtcbiAgICB0aGlzLmlucHV0cy5jb25maWcgPSB7IC4uLkRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29udGVudChkYXRhOiBDb250ZW50RGF0YSwgcHJvcHM6IENvbnRlbnRQcm9wcyA9IHt9KTogVG9wcHkge1xuICAgIHRoaXMuaW5wdXRzLmNvbnRlbnQgPSBnZXRDb250ZW50KGRhdGEsIHByb3BzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNyZWF0ZShrZXk6IHN0cmluZyA9IG51bGwpOiBUb3BweUNvbnRyb2wge1xuICAgIHRoaXMudGlkID0gdGhpcy5pbnB1dHMudGlkID0ga2V5IHx8IGNyZWF0ZUlkKCk7XG5cbiAgICBjb25zdCBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZShcbiAgICAgIFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFRvcHB5Q29udHJvbCxcbiAgICAgICAgICBkZXBzOiBbQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3JdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0aGlzLmluamVjdG9yXG4gICAgKTtcblxuICAgIGNvbnN0IHRjID0gaW5qZWN0b3IuZ2V0KFRvcHB5Q29udHJvbCk7XG4gICAgaWYgKFRvcHB5LmNvbnRyb2xzW3RoaXMudGlkXSkge1xuICAgICAgdGhpcy50aWQgPSBjcmVhdGVJZCgpO1xuICAgIH1cbiAgICB0aGlzLmlucHV0cy5wb3NpdGlvbi5pbml0KHRoaXMudGlkKTtcbiAgICBUb3BweS5jb250cm9sc1t0aGlzLnRpZF0gPSBPYmplY3QuYXNzaWduKHRjLCB0aGlzLmlucHV0cyk7XG4gICAgcmV0dXJuIHRjO1xuICB9XG5cbiAgZ2V0Q3RybCh0aWQ6IFRJRCk6IFRvcHB5Q29udHJvbCB7XG4gICAgcmV0dXJuIFRvcHB5LmNvbnRyb2xzW3RpZF07XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgIGZvciAoY29uc3Qga2V5IGluIFRvcHB5LmNvbnRyb2xzKSB7XG4gICAgICBUb3BweS5jb250cm9sc1trZXldLmNsb3NlKCk7XG4gICAgfVxuICAgIFRvcHB5LmNvbnRyb2xzID0ge307XG4gICAgQnVzLnN0b3AoKTtcbiAgfVxufVxuIl19