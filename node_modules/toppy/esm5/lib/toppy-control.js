/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animationFrameScheduler, fromEvent, merge as mergeObs, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, observeOn, skipWhile, takeUntil, tap } from 'rxjs/operators';
import { ToppyComponent } from './toppy.component';
import { BodyEl, Bus, getContent } from './utils';
var ToppyControl = /** @class */ (function () {
    function ToppyControl(appRef, compResolver, injector) {
        var _this = this;
        this.appRef = appRef;
        this.compResolver = compResolver;
        this.injector = injector;
        this.updateTextContent = new Subject();
        this.isOpen = false;
        this.die = new Subject();
        this.updateTextContent.subscribe(function (content) {
            if (_this.isOpen)
                _this.comp.updateTextContent(content);
        });
    }
    /**
     * @return {?}
     */
    ToppyControl.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isOpen)
            return;
        this.attach();
        if (this.viewEl) {
            mergeObs(this.onDocumentClick(), this.onWindowResize(), this.onEscClick()).subscribe();
            setTimeout(function () { return Bus.send(_this.tid, 't_dynpos'); }, 1);
        }
        Bus.send(this.tid, 't_open');
        this.isOpen = true;
    };
    /**
     * @return {?}
     */
    ToppyControl.prototype.close = /**
     * @return {?}
     */
    function () {
        if (!this.isOpen)
            return;
        this.dettach();
        this.die.next(1);
        Bus.send(this.tid, 't_close');
        this.isOpen = false;
    };
    /**
     * @return {?}
     */
    ToppyControl.prototype.toggle = /**
     * @return {?}
     */
    function () {
        return this.isOpen ? this.close() : this.open();
    };
    /**
     * @return {?}
     */
    ToppyControl.prototype.onEscClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return fromEvent(BodyEl, 'keydown').pipe(takeUntil(this.die), skipWhile(function () { return !_this.config.closeOnEsc; }), filter(function (e) { return (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && e.target.nodeName === 'BODY'; }), tap(function (e) { return e.preventDefault(); }), map(function (e) { return e.target; }), tap(function () { return _this.close(); }));
    };
    /**
     * @return {?}
     */
    ToppyControl.prototype.onDocumentClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return fromEvent(this.viewEl, 'click').pipe(takeUntil(this.die), map(function (e) { return e.target; }), skipWhile(function () { return !_this.config.closeOnDocClick; }), filter(this.isNotHostElement.bind(this)), tap(function () {
            _this.config.docClickCallback();
            _this.close();
        }));
    };
    /**
     * @return {?}
     */
    ToppyControl.prototype.onWindowResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var onResize = fromEvent(window, 'resize');
        /** @type {?} */
        var onScroll = fromEvent(window, 'scroll', { passive: true });
        return mergeObs(onResize, onScroll).pipe(skipWhile(function () { return !_this.config.listenWindowEvents; }), takeUntil(this.die), debounceTime(5), observeOn(animationFrameScheduler), distinctUntilChanged(), tap(function () {
            Bus.send(_this.tid, 't_dynpos');
            _this.config.windowResizeCallback();
        }));
    };
    /**
     * @param {?} newPosition
     * @return {?}
     */
    ToppyControl.prototype.changePosition = /**
     * @param {?} newPosition
     * @return {?}
     */
    function (newPosition) {
        this.position = newPosition;
    };
    /**
     * @param {?} positionConfig
     * @return {?}
     */
    ToppyControl.prototype.updatePosition = /**
     * @param {?} positionConfig
     * @return {?}
     */
    function (positionConfig) {
        this.position.updateConfig(positionConfig);
    };
    /**
     * @param {?} content
     * @param {?=} props
     * @return {?}
     */
    ToppyControl.prototype.updateContent = /**
     * @param {?} content
     * @param {?=} props
     * @return {?}
     */
    function (content, props) {
        if (props === void 0) { props = {}; }
        this.content = getContent(content, tslib_1.__assign({}, this.content.props, props));
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    ToppyControl.prototype.listen = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        return Bus.listen(this.tid, eventName);
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    ToppyControl.prototype.isNotHostElement = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var wrapperEl = this.viewEl.querySelector('.t-wrapper');
        return el !== wrapperEl && !wrapperEl.contains(el);
    };
    /**
     * @private
     * @return {?}
     */
    ToppyControl.prototype.attach = /**
     * @private
     * @return {?}
     */
    function () {
        /* create component */
        this.compFac = this.compResolver.resolveComponentFactory(ToppyComponent);
        this.compRef = this.compFac.create(this.injector);
        this.comp = this.compRef.instance;
        /* assign props */
        var _a = this, position = _a.position, content = _a.content, config = _a.config, tid = _a.tid;
        content.props.close = this.close.bind(this);
        Object.assign(this.comp, { position: position, content: content, config: config, tid: tid });
        /* attach view */
        this.hostView = this.compRef.hostView;
        this.appRef.attachView(this.hostView);
        this.viewEl = ((/** @type {?} */ (this.hostView))).rootNodes[0];
        BodyEl.appendChild(this.viewEl);
    };
    /**
     * @private
     * @return {?}
     */
    ToppyControl.prototype.dettach = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.hostView)
            return;
        this.appRef.detachView(this.hostView);
        this.compRef.destroy();
        this.hostView = this.viewEl = this.comp = null;
    };
    return ToppyControl;
}());
export { ToppyControl };
if (false) {
    /** @type {?} */
    ToppyControl.prototype.position;
    /** @type {?} */
    ToppyControl.prototype.config;
    /** @type {?} */
    ToppyControl.prototype.content;
    /** @type {?} */
    ToppyControl.prototype.tid;
    /** @type {?} */
    ToppyControl.prototype.comp;
    /** @type {?} */
    ToppyControl.prototype.updateTextContent;
    /** @type {?} */
    ToppyControl.prototype.hostView;
    /** @type {?} */
    ToppyControl.prototype.compRef;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.viewEl;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.compFac;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.die;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.compResolver;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,