/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { OutsidePlacement } from '../models';
import { Bus, setWH } from '../utils';
import { ToppyPosition } from './position';
/**
 * @record
 */
function RelativePositionConfig() { }
if (false) {
    /** @type {?} */
    RelativePositionConfig.prototype.src;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.placement;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.autoUpdate;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.width;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.height;
}
var RelativePosition = /** @class */ (function (_super) {
    tslib_1.__extends(RelativePosition, _super);
    function RelativePosition(config) {
        var _this = _super.call(this) || this;
        _this.config = {
            src: null,
            placement: OutsidePlacement.TOP,
            autoUpdate: false,
            width: 'auto',
            height: 'auto'
        };
        _this.updateConfig(config);
        return _this;
    }
    /**
     * @param {?} tid
     * @return {?}
     */
    RelativePosition.prototype.init = /**
     * @param {?} tid
     * @return {?}
     */
    function (tid) {
        if (this.config.autoUpdate)
            this.listenDrag(tid);
    };
    /**
     * @param {?} targetEl
     * @return {?}
     */
    RelativePosition.prototype.getPositions = /**
     * @param {?} targetEl
     * @return {?}
     */
    function (targetEl) {
        /** @type {?} */
        var s = this.getCoords(this.config.src);
        /** @type {?} */
        var h = this.getCoords(targetEl);
        var _a = this.config, w = _a.width, ht = _a.height;
        w = setWH(s, h, 'width', w);
        ht = setWH(s, h, 'height', ht);
        var _b = this.calculatePos(this.config.placement, s, h), pos = _b.pos, props = _b.props;
        return tslib_1.__assign({}, this.round(props), { width: w, height: ht, extra: pos });
    };
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    RelativePosition.prototype.getCoords = /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        return elem.getBoundingClientRect();
    };
    /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    RelativePosition.prototype.calc = /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    function (placement, src, host) {
        var _a = tslib_1.__read(placement.split(''), 2), main = _a[0], sub = _a[1];
        /** @type {?} */
        var p = { left: 0, top: 0 };
        if ((main === 't' || main === 'b') && !sub) {
            p.left = src.left + (src.width - host.width) / 2;
        }
        if ((main === 't' || main === 'b') && sub) {
            p.left = src.left;
        }
        if ((main === 't' || main === 'b') && sub === 'r') {
            p.left = src.left + src.width - host.width;
        }
        if (main === 'l') {
            p.left = src.left - host.width;
        }
        if (main === 'r') {
            p.left = src.right;
        }
        if (main === 't') {
            p.top = src.top - host.height;
        }
        if (main === 'b') {
            p.top = src.top + src.height;
        }
        if (main === 'l' || main === 'r') {
            p.top = src.top + (src.height - host.height) / 2;
        }
        if (sub === 't' && (main === 'l' || main === 'r')) {
            p.top = src.top;
        }
        if (sub === 'b' && (main === 'l' || main === 'r')) {
            p.top = src.top + src.height - host.height;
        }
        return p;
    };
    /**
     * @private
     * @param {?} pos
     * @param {?} s
     * @param {?} h
     * @param {?=} c
     * @return {?}
     */
    RelativePosition.prototype.calculatePos = /**
     * @private
     * @param {?} pos
     * @param {?} s
     * @param {?} h
     * @param {?=} c
     * @return {?}
     */
    function (pos, s, h, c) {
        if (c === void 0) { c = true; }
        /** @type {?} */
        var props = this.calc(pos, s, h);
        if (c && this.config.autoUpdate && this.isOverflowed(tslib_1.__assign({}, props, { width: h.width, height: h.height }))) {
            return this.calculatePos(this.nextPosition(pos), s, h, false);
        }
        return { pos: pos, props: props };
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    RelativePosition.prototype.isOverflowed = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        var innerHeight = window.innerHeight, innerWidth = window.innerWidth;
        props.bottom = props.top + props.height;
        props.right = props.left + props.width;
        return props.bottom > innerHeight || props.top <= 0 || props.left <= 0 || props.right > innerWidth;
    };
    /**
     * @private
     * @param {?} current
     * @return {?}
     */
    RelativePosition.prototype.nextPosition = /**
     * @private
     * @param {?} current
     * @return {?}
     */
    function (current) {
        /** @type {?} */
        var placements = ['t', 'b', 'l', 'r', 'tl', 'bl', 'tr', 'br', 'lt', 'rt', 'lb', 'rb'];
        /** @type {?} */
        var index = placements.indexOf(current);
        /** @type {?} */
        var even = index % 2 === 0;
        return even ? placements[index + 1] : placements[index - 1];
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    RelativePosition.prototype.round = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        Object.keys(props).forEach(function (x) { return (props[x] = Math.round(props[x])); });
        return props;
    };
    /**
     * @private
     * @param {?} tid
     * @return {?}
     */
    RelativePosition.prototype.listenDrag = /**
     * @private
     * @param {?} tid
     * @return {?}
     */
    function (tid) {
        if (this.obs)
            this.obs.disconnect();
        this.obs = new MutationObserver(function (mutationsList) {
            var e_1, _a;
            try {
                for (var mutationsList_1 = tslib_1.__values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    if (mutation.type === 'attributes')
                        Bus.send(tid, 't_dynpos');
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this.obs.observe(this.config.src, {
            attributeFilter: ['style']
        });
    };
    return RelativePosition;
}(ToppyPosition));
export { RelativePosition };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    RelativePosition.prototype.config;
    /** @type {?} */
    RelativePosition.prototype.obs;
}
//# sourceMappingURL=data:application/json;base64,