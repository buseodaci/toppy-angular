import { TemplateRef } from '@angular/core';
import { ToppyPosition } from './position/position';
export interface PositionMeta {
    top?: number;
    left?: number;
    bottom?: number;
    right?: number;
    height?: number | string;
    width?: number | string;
    position?: string;
    extra?: string;
}
declare enum p {
    TOP = "t",
    LEFT = "l",
    RIGHT = "r",
    BOTTOM = "b",
    TOP_LEFT = "tl",
    TOP_RIGHT = "tr",
    BOTTOM_LEFT = "bl",
    BOTTOM_RIGHT = "br"
}
declare enum o {
    LEFT_TOP = "lt",
    RIGHT_TOP = "rt",
    LEFT_BOTTOM = "lb",
    RIGHT_BOTTOM = "rb"
}
declare enum i {
    CENTER = "c"
}
export declare const OutsidePlacement: {
    [x: number]: string;
    LEFT_TOP: o.LEFT_TOP;
    RIGHT_TOP: o.RIGHT_TOP;
    LEFT_BOTTOM: o.LEFT_BOTTOM;
    RIGHT_BOTTOM: o.RIGHT_BOTTOM;
    TOP: p.TOP;
    LEFT: p.LEFT;
    RIGHT: p.RIGHT;
    BOTTOM: p.BOTTOM;
    TOP_LEFT: p.TOP_LEFT;
    TOP_RIGHT: p.TOP_RIGHT;
    BOTTOM_LEFT: p.BOTTOM_LEFT;
    BOTTOM_RIGHT: p.BOTTOM_RIGHT;
};
export declare const InsidePlacement: {
    [x: number]: string;
    CENTER: i.CENTER;
    TOP: p.TOP;
    LEFT: p.LEFT;
    RIGHT: p.RIGHT;
    BOTTOM: p.BOTTOM;
    TOP_LEFT: p.TOP_LEFT;
    TOP_RIGHT: p.TOP_RIGHT;
    BOTTOM_LEFT: p.BOTTOM_LEFT;
    BOTTOM_RIGHT: p.BOTTOM_RIGHT;
};
export declare type OutsidePlacement = p | o;
export declare type InsidePlacement = p | i;
export declare enum SlidePlacement {
    LEFT = "l",
    RIGHT = "r"
}
export interface ContainerSize {
    width: string | number;
    height: string | number;
}
export interface ToppyConfig {
    backdrop: boolean;
    containerClass: string;
    wrapperClass: string;
    backdropClass: string;
    listenWindowEvents: boolean;
    closeOnDocClick: boolean;
    bodyClass: string;
    closeOnEsc: boolean;
    windowResizeCallback: () => void;
    docClickCallback: () => void;
}
export interface ComponentType<T> {
    new (...args: any[]): T;
}
export declare type TID = string;
export declare type ToppyEventName = 't_open' | 't_close' | 't_dynpos' | 't_detach' | 't_posupdate' | 't_compins';
export interface ToppyEvent {
    from: TID;
    name: ToppyEventName;
    data?: any;
}
export declare const enum ContentType {
    STRING = "s",
    HTML = "h",
    TEMPLATE = "t",
    COMPONENT = "c"
}
export declare type ContentData = string | TemplateRef<any> | ComponentType<any>;
export declare type ContentProps = {
    [x: string]: any;
} | any;
export interface Content {
    type?: ContentType;
    data: ContentData;
    props?: ContentProps;
}
export interface Inputs {
    position: ToppyPosition | null;
    config: ToppyConfig;
    content: Content;
    tid: TID;
}
export {};
