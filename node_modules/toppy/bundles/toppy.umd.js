(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('toppy', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global.toppy = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,i0,rxjs,operators,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
        return t;
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var p = {
        TOP: 't',
        LEFT: 'l',
        RIGHT: 'r',
        BOTTOM: 'b',
        TOP_LEFT: 'tl',
        TOP_RIGHT: 'tr',
        BOTTOM_LEFT: 'bl',
        BOTTOM_RIGHT: 'br',
    };
    /** @enum {string} */
    var o = {
        LEFT_TOP: 'lt',
        RIGHT_TOP: 'rt',
        LEFT_BOTTOM: 'lb',
        RIGHT_BOTTOM: 'rb',
    };
    /** @enum {string} */
    var i = {
        CENTER: 'c',
    };
    /** @type {?} */
    var OutsidePlacement = __assign({}, p, o);
    /** @type {?} */
    var InsidePlacement = __assign({}, p, i);
    /** @enum {string} */
    var SlidePlacement = {
        LEFT: 'l',
        RIGHT: 'r',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ToppyPosition = /** @class */ (function () {
        function ToppyPosition() {
            this.config = {};
        }
        /**
         * @return {?}
         */
        ToppyPosition.prototype.getClassName = /**
         * @return {?}
         */
            function () {
                return this.constructor.name.replace('Pos', '-pos').toLowerCase();
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ToppyPosition.prototype.updateConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.config = __assign({}, this.config, config);
            };
        /**
         * @param {?} tid
         * @return {?}
         */
        ToppyPosition.prototype.init = /**
         * @param {?} tid
         * @return {?}
         */
            function (tid) { };
        return ToppyPosition;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FullscreenPosition = /** @class */ (function (_super) {
        __extends(FullscreenPosition, _super);
        function FullscreenPosition() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        FullscreenPosition.prototype.getPositions = /**
         * @return {?}
         */
            function () {
                return { top: 0, left: 0, width: '100%', height: '100%', position: 'fixed' };
            };
        return FullscreenPosition;
    }(ToppyPosition));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} data
     * @param {?=} props
     * @return {?}
     */
    function getContent(data, props) {
        if (props === void 0) {
            props = {};
        }
        /** @type {?} */
        var type = "c" /* COMPONENT */;
        if (typeof data === 'string' && props['hasHTML'])
            type = "h" /* HTML */;
        else if (typeof data === 'string')
            type = "s" /* STRING */;
        else if (data instanceof i0.TemplateRef)
            type = "t" /* TEMPLATE */;
        return { data: data, type: type, props: props };
    }
    /**
     * @return {?}
     */
    function createId() {
        return Math.random()
            .toString(36)
            .substr(2, 5);
    }
    /* html dom utils */
    /**
     * @param {?} method
     * @param {?} cls
     * @param {?=} target
     * @return {?}
     */
    function cssClass(method, cls, target) {
        if (target === void 0) {
            target = 'body';
        }
        var _a;
        (_a = document.querySelector(target).classList)[method].apply(_a, __spread(cls));
    }
    /**
     * @param {?} styleObj
     * @return {?}
     */
    function toCss(styleObj) {
        return Object.keys(styleObj)
            .map(function (x) { return x + ":" + styleObj[x] + (typeof styleObj[x] === 'number' ? 'px' : ''); })
            .join(';');
    }
    /**
     * @param {?} max
     * @param {?} percentage
     * @return {?}
     */
    function percentToCss(max, percentage) {
        /** @type {?} */
        var number = Number(percentage.slice(0, -1));
        if (number > 100) {
            number = 100;
        }
        return "calc(" + max + "px - " + (100 - number) + "%)";
    }
    /**
     * @param {?} src
     * @param {?} host
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function setWH(src, host, key, value) {
        if (typeof value === 'number') {
            host[key] = value = Math.abs(value);
        }
        if (typeof value === 'string' && value.endsWith('%')) {
            value = percentToCss(src[key], value);
        }
        return value;
    }
    /** @type {?} */
    var BodyEl = document.querySelector('body');
    /* events */
    var /* events */ BusClass = /** @class */ (function () {
        function BusClass() {
            this._e = new rxjs.Subject();
        }
        /**
         * @param {?} from
         * @param {?} name
         * @param {?=} data
         * @return {?}
         */
        BusClass.prototype.send = /**
         * @param {?} from
         * @param {?} name
         * @param {?=} data
         * @return {?}
         */
            function (from, name, data) {
                if (data === void 0) {
                    data = null;
                }
                this._e.next({ from: from, name: name, data: data });
            };
        /**
         * @param {?} from
         * @param {?} name
         * @return {?}
         */
        BusClass.prototype.listen = /**
         * @param {?} from
         * @param {?} name
         * @return {?}
         */
            function (from, name) {
                return this._e.asObservable().pipe(operators.filter(function (e) { return e.from === from && e.name === name; }), operators.map(function (e) { return e.data; }));
            };
        /**
         * @return {?}
         */
        BusClass.prototype.stop = /**
         * @return {?}
         */
            function () {
                this._e.complete();
            };
        return BusClass;
    }());
    /** @type {?} */
    var Bus = new BusClass();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalPosition = /** @class */ (function (_super) {
        __extends(GlobalPosition, _super);
        function GlobalPosition(config) {
            var _this = _super.call(this) || this;
            _this.config = { placement: InsidePlacement.CENTER, width: 100, height: 100, offset: 0 };
            _this.updateConfig(config);
            return _this;
        }
        /**
         * @param {?=} hostEl
         * @return {?}
         */
        GlobalPosition.prototype.getPositions = /**
         * @param {?=} hostEl
         * @return {?}
         */
            function (hostEl) {
                /** @type {?} */
                var host = ( /** @type {?} */(hostEl.getBoundingClientRect()));
                /** @type {?} */
                var src = {
                    width: window['innerWidth'],
                    height: window['innerHeight']
                };
                var _a = this.config, w = _a.width, h = _a.height;
                w = setWH(src, host, 'width', w);
                h = setWH(src, host, 'height', h);
                /** @type {?} */
                var props = this.calc(this.config.placement, src, host);
                return __assign({}, props, { width: w, height: h, position: 'fixed', extra: this.config.placement });
            };
        /**
         * @private
         * @param {?} placement
         * @param {?} src
         * @param {?} host
         * @return {?}
         */
        GlobalPosition.prototype.calc = /**
         * @private
         * @param {?} placement
         * @param {?} src
         * @param {?} host
         * @return {?}
         */
            function (placement, src, host) {
                var _a = __read(placement.split(''), 2), main = _a[0], sub = _a[1];
                /** @type {?} */
                var p = {};
                if (main === 't') {
                    p.top = this.config.offset;
                }
                if (main === 'b') {
                    p.bottom = this.config.offset;
                }
                if ((main === 'l' || main === 'r' || main === 'c') && !sub) {
                    p.top = (src.height - host.height) / 2;
                }
                if ((main === 't' || main === 'b' || main === 'c') && !sub) {
                    p.left = (src.width - host.width) / 2;
                }
                if ((main === 'l' && !sub) || sub === 'l') {
                    p.left = this.config.offset;
                }
                if ((main === 'r' && !sub) || sub === 'r') {
                    p.right = this.config.offset;
                }
                return p;
            };
        return GlobalPosition;
    }(ToppyPosition));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RelativePosition = /** @class */ (function (_super) {
        __extends(RelativePosition, _super);
        function RelativePosition(config) {
            var _this = _super.call(this) || this;
            _this.config = {
                src: null,
                placement: OutsidePlacement.TOP,
                autoUpdate: false,
                width: 'auto',
                height: 'auto'
            };
            _this.updateConfig(config);
            return _this;
        }
        /**
         * @param {?} tid
         * @return {?}
         */
        RelativePosition.prototype.init = /**
         * @param {?} tid
         * @return {?}
         */
            function (tid) {
                if (this.config.autoUpdate)
                    this.listenDrag(tid);
            };
        /**
         * @param {?} targetEl
         * @return {?}
         */
        RelativePosition.prototype.getPositions = /**
         * @param {?} targetEl
         * @return {?}
         */
            function (targetEl) {
                /** @type {?} */
                var s = this.getCoords(this.config.src);
                /** @type {?} */
                var h = this.getCoords(targetEl);
                var _a = this.config, w = _a.width, ht = _a.height;
                w = setWH(s, h, 'width', w);
                ht = setWH(s, h, 'height', ht);
                var _b = this.calculatePos(this.config.placement, s, h), pos = _b.pos, props = _b.props;
                return __assign({}, this.round(props), { width: w, height: ht, extra: pos });
            };
        /**
         * @private
         * @param {?} elem
         * @return {?}
         */
        RelativePosition.prototype.getCoords = /**
         * @private
         * @param {?} elem
         * @return {?}
         */
            function (elem) {
                return elem.getBoundingClientRect();
            };
        /**
         * @private
         * @param {?} placement
         * @param {?} src
         * @param {?} host
         * @return {?}
         */
        RelativePosition.prototype.calc = /**
         * @private
         * @param {?} placement
         * @param {?} src
         * @param {?} host
         * @return {?}
         */
            function (placement, src, host) {
                var _a = __read(placement.split(''), 2), main = _a[0], sub = _a[1];
                /** @type {?} */
                var p = { left: 0, top: 0 };
                if ((main === 't' || main === 'b') && !sub) {
                    p.left = src.left + (src.width - host.width) / 2;
                }
                if ((main === 't' || main === 'b') && sub) {
                    p.left = src.left;
                }
                if ((main === 't' || main === 'b') && sub === 'r') {
                    p.left = src.left + src.width - host.width;
                }
                if (main === 'l') {
                    p.left = src.left - host.width;
                }
                if (main === 'r') {
                    p.left = src.right;
                }
                if (main === 't') {
                    p.top = src.top - host.height;
                }
                if (main === 'b') {
                    p.top = src.top + src.height;
                }
                if (main === 'l' || main === 'r') {
                    p.top = src.top + (src.height - host.height) / 2;
                }
                if (sub === 't' && (main === 'l' || main === 'r')) {
                    p.top = src.top;
                }
                if (sub === 'b' && (main === 'l' || main === 'r')) {
                    p.top = src.top + src.height - host.height;
                }
                return p;
            };
        /**
         * @private
         * @param {?} pos
         * @param {?} s
         * @param {?} h
         * @param {?=} c
         * @return {?}
         */
        RelativePosition.prototype.calculatePos = /**
         * @private
         * @param {?} pos
         * @param {?} s
         * @param {?} h
         * @param {?=} c
         * @return {?}
         */
            function (pos, s, h, c) {
                if (c === void 0) {
                    c = true;
                }
                /** @type {?} */
                var props = this.calc(pos, s, h);
                if (c && this.config.autoUpdate && this.isOverflowed(__assign({}, props, { width: h.width, height: h.height }))) {
                    return this.calculatePos(this.nextPosition(pos), s, h, false);
                }
                return { pos: pos, props: props };
            };
        /**
         * @private
         * @param {?} props
         * @return {?}
         */
        RelativePosition.prototype.isOverflowed = /**
         * @private
         * @param {?} props
         * @return {?}
         */
            function (props) {
                var innerHeight = window.innerHeight, innerWidth = window.innerWidth;
                props.bottom = props.top + props.height;
                props.right = props.left + props.width;
                return props.bottom > innerHeight || props.top <= 0 || props.left <= 0 || props.right > innerWidth;
            };
        /**
         * @private
         * @param {?} current
         * @return {?}
         */
        RelativePosition.prototype.nextPosition = /**
         * @private
         * @param {?} current
         * @return {?}
         */
            function (current) {
                /** @type {?} */
                var placements = ['t', 'b', 'l', 'r', 'tl', 'bl', 'tr', 'br', 'lt', 'rt', 'lb', 'rb'];
                /** @type {?} */
                var index = placements.indexOf(current);
                /** @type {?} */
                var even = index % 2 === 0;
                return even ? placements[index + 1] : placements[index - 1];
            };
        /**
         * @private
         * @param {?} props
         * @return {?}
         */
        RelativePosition.prototype.round = /**
         * @private
         * @param {?} props
         * @return {?}
         */
            function (props) {
                Object.keys(props).forEach(function (x) { return (props[x] = Math.round(props[x])); });
                return props;
            };
        /**
         * @private
         * @param {?} tid
         * @return {?}
         */
        RelativePosition.prototype.listenDrag = /**
         * @private
         * @param {?} tid
         * @return {?}
         */
            function (tid) {
                if (this.obs)
                    this.obs.disconnect();
                this.obs = new MutationObserver(function (mutationsList) {
                    var e_1, _a;
                    try {
                        for (var mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                            var mutation = mutationsList_1_1.value;
                            if (mutation.type === 'attributes')
                                Bus.send(tid, 't_dynpos');
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return))
                                _a.call(mutationsList_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                });
                this.obs.observe(this.config.src, {
                    attributeFilter: ['style']
                });
            };
        return RelativePosition;
    }(ToppyPosition));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SlidePosition = /** @class */ (function (_super) {
        __extends(SlidePosition, _super);
        function SlidePosition(config) {
            var _this = _super.call(this) || this;
            _this.config = { placement: SlidePlacement.LEFT, width: '30%' };
            _this.config = __assign({}, _this.config, config);
            return _this;
        }
        /**
         * @return {?}
         */
        SlidePosition.prototype.getPositions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var props = this.config.placement === SlidePlacement.LEFT ? { left: 0 } : { right: 0 };
                return __assign({}, props, { top: 0, width: this.config.width, height: '100%', position: 'fixed', extra: this.config.placement });
            };
        return SlidePosition;
    }(ToppyPosition));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DefaultConfig = {
        containerClass: 't-overlay',
        bodyClass: 't-open',
        wrapperClass: '',
        backdropClass: '',
        backdrop: false,
        closeOnDocClick: false,
        listenWindowEvents: true,
        closeOnEsc: false,
        windowResizeCallback: function () { },
        docClickCallback: function () { }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToppyComponent = /** @class */ (function () {
        function ToppyComponent(inj, cd, compResolver, elRef) {
            this.inj = inj;
            this.cd = cd;
            this.compResolver = compResolver;
            this.elRef = elRef;
            this.content = {
                type: "s" /* STRING */,
                data: '',
                props: {}
            };
            this.die = new rxjs.Subject();
            this.pinj = i0.Injector;
        }
        /**
         * @return {?}
         */
        ToppyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.el = this.elRef.nativeElement;
                this.wrapperEl = this.el.querySelector('.t-wrapper');
                /** @type {?} */
                var cls = ['t-container', this.config.containerClass, this.position.getClassName()];
                if (this.config.closeOnDocClick) {
                    cls = cls.concat(['no-pointers']);
                }
                this.el.setAttribute('data-tid', this.tid);
                cssClass('add', cls, "[data-tid='" + [this.tid] + "']");
                cssClass('add', [this.config.bodyClass]);
            };
        /**
         * @return {?}
         */
        ToppyComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.listenPos().subscribe();
                if (this.content.type === "c" /* COMPONENT */) {
                    this.compInstance = this.setComponent(this.content.props);
                    Bus.send(this.tid, 't_compins', this.compInstance);
                }
            };
        /**
         * @param {?} props
         * @return {?}
         */
        ToppyComponent.prototype.setComponent = /**
         * @param {?} props
         * @return {?}
         */
            function (props) {
                /** @type {?} */
                var compRef = this.compOutlet.createComponent(this.compResolver.resolveComponentFactory(( /** @type {?} */(this.content.data))));
                Object.assign(compRef.instance, props);
                compRef.changeDetectorRef.detectChanges();
                return compRef.instance;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        ToppyComponent.prototype.updateTextContent = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (this.content.type === "s" /* STRING */) {
                    this.content.data = data;
                    this.cd.detectChanges();
                }
            };
        /**
         * @return {?}
         */
        ToppyComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                cssClass('remove', [this.config.bodyClass]);
                this.die.next(1);
                Bus.send(this.tid, 't_detach');
            };
        /**
         * @private
         * @return {?}
         */
        ToppyComponent.prototype.listenPos = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                return Bus.listen(this.tid, 't_dynpos').pipe(operators.startWith(1), operators.takeUntil(this.die), operators.tap(function (e) {
                    if (!e || !e.x)
                        return _this.setPos();
                    /** @type {?} */
                    var coords = { left: e.x, top: e.y };
                    _this.wrapperEl.style = toCss(coords);
                }));
            };
        /**
         * @private
         * @return {?}
         */
        ToppyComponent.prototype.setPos = /**
         * @private
         * @return {?}
         */
            function () {
                var _a = this.position.getPositions(this.wrapperEl), extra = _a.extra, coords = __rest(_a, ["extra"]);
                if (this.extra !== extra) {
                    this.extra = extra;
                    this.cd.detectChanges();
                }
                Object.assign(coords, { visibility: 'visible', opacity: '1' });
                this.wrapperEl.style = toCss(coords);
                Bus.send(this.tid, 't_posupdate');
            };
        ToppyComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'toppy',
                        template: "<div class=\"t-backdrop\" *ngIf=\"config.backdrop\" [ngClass]=\"config.backdropClass\"></div>\n<div class=\"t-wrapper\" [ngClass]=\"config.wrapperClass\" [class]=\"extra\" #wrapperEl>\n  <ng-container [ngSwitch]=\"content.type\">\n    <ng-container *ngSwitchCase=\"'s'\">\n      <div [class]=\"content.props.class\">{{ content.data }}</div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'h'\"> <div [innerHTML]=\"content.data\"></div> </ng-container>\n    <ng-container *ngSwitchCase=\"'t'\">\n      <ng-container *ngTemplateOutlet=\"content.data; context: { $implicit: content.props }\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'c'\"> <ng-template #compOutlet></ng-template> </ng-container>\n  </ng-container>\n</div>\n",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: [":host{left:0;position:fixed;top:0;width:100%;height:100%;pointer-events:none}:host.no-pointers{pointer-events:all}:host .t-backdrop{left:0;position:fixed;top:0;width:100%;height:100%;background:rgba(0,0,0,.5)}:host>div.t-wrapper{position:absolute;visibility:hidden;opacity:0;transition:opacity .2s;overflow:hidden;pointer-events:all}"]
                    }] }
        ];
        /** @nocollapse */
        ToppyComponent.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: i0.ChangeDetectorRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.ElementRef }
            ];
        };
        ToppyComponent.propDecorators = {
            compOutlet: [{ type: i0.ViewChild, args: ['compOutlet', { read: i0.ViewContainerRef },] }]
        };
        return ToppyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToppyControl = /** @class */ (function () {
        function ToppyControl(appRef, compResolver, injector) {
            var _this = this;
            this.appRef = appRef;
            this.compResolver = compResolver;
            this.injector = injector;
            this.updateTextContent = new rxjs.Subject();
            this.isOpen = false;
            this.die = new rxjs.Subject();
            this.updateTextContent.subscribe(function (content) {
                if (_this.isOpen)
                    _this.comp.updateTextContent(content);
            });
        }
        /**
         * @return {?}
         */
        ToppyControl.prototype.open = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isOpen)
                    return;
                this.attach();
                if (this.viewEl) {
                    rxjs.merge(this.onDocumentClick(), this.onWindowResize(), this.onEscClick()).subscribe();
                    setTimeout(function () { return Bus.send(_this.tid, 't_dynpos'); }, 1);
                }
                Bus.send(this.tid, 't_open');
                this.isOpen = true;
            };
        /**
         * @return {?}
         */
        ToppyControl.prototype.close = /**
         * @return {?}
         */
            function () {
                if (!this.isOpen)
                    return;
                this.dettach();
                this.die.next(1);
                Bus.send(this.tid, 't_close');
                this.isOpen = false;
            };
        /**
         * @return {?}
         */
        ToppyControl.prototype.toggle = /**
         * @return {?}
         */
            function () {
                return this.isOpen ? this.close() : this.open();
            };
        /**
         * @return {?}
         */
        ToppyControl.prototype.onEscClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.fromEvent(BodyEl, 'keydown').pipe(operators.takeUntil(this.die), operators.skipWhile(function () { return !_this.config.closeOnEsc; }), operators.filter(function (e) { return (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && e.target.nodeName === 'BODY'; }), operators.tap(function (e) { return e.preventDefault(); }), operators.map(function (e) { return e.target; }), operators.tap(function () { return _this.close(); }));
            };
        /**
         * @return {?}
         */
        ToppyControl.prototype.onDocumentClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.fromEvent(this.viewEl, 'click').pipe(operators.takeUntil(this.die), operators.map(function (e) { return e.target; }), operators.skipWhile(function () { return !_this.config.closeOnDocClick; }), operators.filter(this.isNotHostElement.bind(this)), operators.tap(function () {
                    _this.config.docClickCallback();
                    _this.close();
                }));
            };
        /**
         * @return {?}
         */
        ToppyControl.prototype.onWindowResize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var onResize = rxjs.fromEvent(window, 'resize');
                /** @type {?} */
                var onScroll = rxjs.fromEvent(window, 'scroll', { passive: true });
                return rxjs.merge(onResize, onScroll).pipe(operators.skipWhile(function () { return !_this.config.listenWindowEvents; }), operators.takeUntil(this.die), operators.debounceTime(5), operators.observeOn(rxjs.animationFrameScheduler), operators.distinctUntilChanged(), operators.tap(function () {
                    Bus.send(_this.tid, 't_dynpos');
                    _this.config.windowResizeCallback();
                }));
            };
        /**
         * @param {?} newPosition
         * @return {?}
         */
        ToppyControl.prototype.changePosition = /**
         * @param {?} newPosition
         * @return {?}
         */
            function (newPosition) {
                this.position = newPosition;
            };
        /**
         * @param {?} positionConfig
         * @return {?}
         */
        ToppyControl.prototype.updatePosition = /**
         * @param {?} positionConfig
         * @return {?}
         */
            function (positionConfig) {
                this.position.updateConfig(positionConfig);
            };
        /**
         * @param {?} content
         * @param {?=} props
         * @return {?}
         */
        ToppyControl.prototype.updateContent = /**
         * @param {?} content
         * @param {?=} props
         * @return {?}
         */
            function (content, props) {
                if (props === void 0) {
                    props = {};
                }
                this.content = getContent(content, __assign({}, this.content.props, props));
            };
        /**
         * @param {?} eventName
         * @return {?}
         */
        ToppyControl.prototype.listen = /**
         * @param {?} eventName
         * @return {?}
         */
            function (eventName) {
                return Bus.listen(this.tid, eventName);
            };
        /**
         * @private
         * @param {?} el
         * @return {?}
         */
        ToppyControl.prototype.isNotHostElement = /**
         * @private
         * @param {?} el
         * @return {?}
         */
            function (el) {
                /** @type {?} */
                var wrapperEl = this.viewEl.querySelector('.t-wrapper');
                return el !== wrapperEl && !wrapperEl.contains(el);
            };
        /**
         * @private
         * @return {?}
         */
        ToppyControl.prototype.attach = /**
         * @private
         * @return {?}
         */
            function () {
                /* create component */
                this.compFac = this.compResolver.resolveComponentFactory(ToppyComponent);
                this.compRef = this.compFac.create(this.injector);
                this.comp = this.compRef.instance;
                /* assign props */
                var _a = this, position = _a.position, content = _a.content, config = _a.config, tid = _a.tid;
                content.props.close = this.close.bind(this);
                Object.assign(this.comp, { position: position, content: content, config: config, tid: tid });
                /* attach view */
                this.hostView = this.compRef.hostView;
                this.appRef.attachView(this.hostView);
                this.viewEl = (( /** @type {?} */(this.hostView))).rootNodes[0];
                BodyEl.appendChild(this.viewEl);
            };
        /**
         * @private
         * @return {?}
         */
        ToppyControl.prototype.dettach = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.hostView)
                    return;
                this.appRef.detachView(this.hostView);
                this.compRef.destroy();
                this.hostView = this.viewEl = this.comp = null;
            };
        return ToppyControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Toppy = /** @class */ (function () {
        function Toppy(injector) {
            this.injector = injector;
            this.inputs = {
                position: null,
                config: DefaultConfig,
                content: { type: "s" /* STRING */, data: 'hello', props: {} },
                tid: null
            };
            this.inputs.position = new GlobalPosition({ placement: InsidePlacement.TOP });
        }
        /**
         * @param {?} position
         * @return {?}
         */
        Toppy.prototype.position = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this.inputs.position = position;
                return this;
            };
        /**
         * @param {?} config
         * @return {?}
         */
        Toppy.prototype.config = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.inputs.config = __assign({}, DefaultConfig, config);
                return this;
            };
        /**
         * @param {?} data
         * @param {?=} props
         * @return {?}
         */
        Toppy.prototype.content = /**
         * @param {?} data
         * @param {?=} props
         * @return {?}
         */
            function (data, props) {
                if (props === void 0) {
                    props = {};
                }
                this.inputs.content = getContent(data, props);
                return this;
            };
        /**
         * @param {?=} key
         * @return {?}
         */
        Toppy.prototype.create = /**
         * @param {?=} key
         * @return {?}
         */
            function (key) {
                if (key === void 0) {
                    key = null;
                }
                this.tid = this.inputs.tid = key || createId();
                /** @type {?} */
                var injector = i0.Injector.create([
                    {
                        provide: ToppyControl,
                        deps: [i0.ApplicationRef, i0.ComponentFactoryResolver, i0.Injector]
                    }
                ], this.injector);
                /** @type {?} */
                var tc = injector.get(ToppyControl);
                if (Toppy.controls[this.tid]) {
                    this.tid = createId();
                }
                this.inputs.position.init(this.tid);
                Toppy.controls[this.tid] = Object.assign(tc, this.inputs);
                return tc;
            };
        /**
         * @param {?} tid
         * @return {?}
         */
        Toppy.prototype.getCtrl = /**
         * @param {?} tid
         * @return {?}
         */
            function (tid) {
                return Toppy.controls[tid];
            };
        /**
         * @return {?}
         */
        Toppy.prototype.destroy = /**
         * @return {?}
         */
            function () {
                // tslint:disable-next-line:forin
                for (var key in Toppy.controls) {
                    Toppy.controls[key].close();
                }
                Toppy.controls = {};
                Bus.stop();
            };
        Toppy.controls = {};
        Toppy.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        Toppy.ctorParameters = function () {
            return [
                { type: i0.Injector }
            ];
        };
        /** @nocollapse */ Toppy.ngInjectableDef = i0.defineInjectable({ factory: function Toppy_Factory() { return new Toppy(i0.inject(i0.INJECTOR)); }, token: Toppy, providedIn: "root" });
        return Toppy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToppyModule = /** @class */ (function () {
        function ToppyModule() {
        }
        ToppyModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [ToppyComponent],
                        entryComponents: [ToppyComponent]
                    },] }
        ];
        return ToppyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.InsidePlacement = InsidePlacement;
    exports.OutsidePlacement = OutsidePlacement;
    exports.SlidePlacement = SlidePlacement;
    exports.FullscreenPosition = FullscreenPosition;
    exports.GlobalPosition = GlobalPosition;
    exports.RelativePosition = RelativePosition;
    exports.SlidePosition = SlidePosition;
    exports.Toppy = Toppy;
    exports.ToppyControl = ToppyControl;
    exports.ToppyModule = ToppyModule;
    exports.ɵa = ToppyComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,