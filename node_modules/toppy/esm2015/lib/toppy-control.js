/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animationFrameScheduler, fromEvent, merge as mergeObs, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, observeOn, skipWhile, takeUntil, tap } from 'rxjs/operators';
import { ToppyComponent } from './toppy.component';
import { BodyEl, Bus, getContent } from './utils';
export class ToppyControl {
    /**
     * @param {?} appRef
     * @param {?} compResolver
     * @param {?} injector
     */
    constructor(appRef, compResolver, injector) {
        this.appRef = appRef;
        this.compResolver = compResolver;
        this.injector = injector;
        this.updateTextContent = new Subject();
        this.isOpen = false;
        this.die = new Subject();
        this.updateTextContent.subscribe(content => {
            if (this.isOpen)
                this.comp.updateTextContent(content);
        });
    }
    /**
     * @return {?}
     */
    open() {
        if (this.isOpen)
            return;
        this.attach();
        if (this.viewEl) {
            mergeObs(this.onDocumentClick(), this.onWindowResize(), this.onEscClick()).subscribe();
            setTimeout(() => Bus.send(this.tid, 't_dynpos'), 1);
        }
        Bus.send(this.tid, 't_open');
        this.isOpen = true;
    }
    /**
     * @return {?}
     */
    close() {
        if (!this.isOpen)
            return;
        this.dettach();
        this.die.next(1);
        Bus.send(this.tid, 't_close');
        this.isOpen = false;
    }
    /**
     * @return {?}
     */
    toggle() {
        return this.isOpen ? this.close() : this.open();
    }
    /**
     * @return {?}
     */
    onEscClick() {
        return fromEvent(BodyEl, 'keydown').pipe(takeUntil(this.die), skipWhile(() => !this.config.closeOnEsc), filter((e) => (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && e.target.nodeName === 'BODY'), tap(e => e.preventDefault()), map(e => e.target), tap(() => this.close()));
    }
    /**
     * @return {?}
     */
    onDocumentClick() {
        return fromEvent(this.viewEl, 'click').pipe(takeUntil(this.die), map((e) => e.target), skipWhile(() => !this.config.closeOnDocClick), filter(this.isNotHostElement.bind(this)), tap(() => {
            this.config.docClickCallback();
            this.close();
        }));
    }
    /**
     * @return {?}
     */
    onWindowResize() {
        /** @type {?} */
        const onResize = fromEvent(window, 'resize');
        /** @type {?} */
        const onScroll = fromEvent(window, 'scroll', { passive: true });
        return mergeObs(onResize, onScroll).pipe(skipWhile(() => !this.config.listenWindowEvents), takeUntil(this.die), debounceTime(5), observeOn(animationFrameScheduler), distinctUntilChanged(), tap(() => {
            Bus.send(this.tid, 't_dynpos');
            this.config.windowResizeCallback();
        }));
    }
    /**
     * @param {?} newPosition
     * @return {?}
     */
    changePosition(newPosition) {
        this.position = newPosition;
    }
    /**
     * @param {?} positionConfig
     * @return {?}
     */
    updatePosition(positionConfig) {
        this.position.updateConfig(positionConfig);
    }
    /**
     * @param {?} content
     * @param {?=} props
     * @return {?}
     */
    updateContent(content, props = {}) {
        this.content = getContent(content, Object.assign({}, this.content.props, props));
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    listen(eventName) {
        return Bus.listen(this.tid, eventName);
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    isNotHostElement(el) {
        /** @type {?} */
        const wrapperEl = this.viewEl.querySelector('.t-wrapper');
        return el !== wrapperEl && !wrapperEl.contains(el);
    }
    /**
     * @private
     * @return {?}
     */
    attach() {
        /* create component */
        this.compFac = this.compResolver.resolveComponentFactory(ToppyComponent);
        this.compRef = this.compFac.create(this.injector);
        this.comp = this.compRef.instance;
        /* assign props */
        const { position, content, config, tid } = this;
        content.props.close = this.close.bind(this);
        Object.assign(this.comp, { position, content, config, tid });
        /* attach view */
        this.hostView = this.compRef.hostView;
        this.appRef.attachView(this.hostView);
        this.viewEl = ((/** @type {?} */ (this.hostView))).rootNodes[0];
        BodyEl.appendChild(this.viewEl);
    }
    /**
     * @private
     * @return {?}
     */
    dettach() {
        if (!this.hostView)
            return;
        this.appRef.detachView(this.hostView);
        this.compRef.destroy();
        this.hostView = this.viewEl = this.comp = null;
    }
}
if (false) {
    /** @type {?} */
    ToppyControl.prototype.position;
    /** @type {?} */
    ToppyControl.prototype.config;
    /** @type {?} */
    ToppyControl.prototype.content;
    /** @type {?} */
    ToppyControl.prototype.tid;
    /** @type {?} */
    ToppyControl.prototype.comp;
    /** @type {?} */
    ToppyControl.prototype.updateTextContent;
    /** @type {?} */
    ToppyControl.prototype.hostView;
    /** @type {?} */
    ToppyControl.prototype.compRef;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.viewEl;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.compFac;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.die;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.compResolver;
    /**
     * @type {?}
     * @private
     */
    ToppyControl.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,