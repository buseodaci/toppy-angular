/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
/**
 * @param {?} data
 * @param {?=} props
 * @return {?}
 */
export function getContent(data, props = {}) {
    /** @type {?} */
    let type = "c" /* COMPONENT */;
    if (typeof data === 'string' && props['hasHTML'])
        type = "h" /* HTML */;
    else if (typeof data === 'string')
        type = "s" /* STRING */;
    else if (data instanceof TemplateRef)
        type = "t" /* TEMPLATE */;
    return { data, type, props };
}
/**
 * @return {?}
 */
export function createId() {
    return Math.random()
        .toString(36)
        .substr(2, 5);
}
/* html dom utils */
/**
 * @param {?} method
 * @param {?} cls
 * @param {?=} target
 * @return {?}
 */
export function cssClass(method, cls, target = 'body') {
    document.querySelector(target).classList[method](...cls);
}
/**
 * @param {?} styleObj
 * @return {?}
 */
export function toCss(styleObj) {
    return Object.keys(styleObj)
        .map(x => `${x}:${styleObj[x]}${typeof styleObj[x] === 'number' ? 'px' : ''}`)
        .join(';');
}
/**
 * @param {?} max
 * @param {?} percentage
 * @return {?}
 */
export function percentToCss(max, percentage) {
    /** @type {?} */
    let number = Number(percentage.slice(0, -1));
    if (number > 100) {
        number = 100;
    }
    return `calc(${max}px - ${100 - number}%)`;
}
/**
 * @param {?} src
 * @param {?} host
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function setWH(src, host, key, value) {
    if (typeof value === 'number') {
        host[key] = value = Math.abs(value);
    }
    if (typeof value === 'string' && value.endsWith('%')) {
        value = percentToCss(src[key], value);
    }
    return value;
}
/** @type {?} */
export const BodyEl = document.querySelector('body');
/* events */
class BusClass {
    constructor() {
        this._e = new Subject();
    }
    /**
     * @param {?} from
     * @param {?} name
     * @param {?=} data
     * @return {?}
     */
    send(from, name, data = null) {
        this._e.next({ from, name, data });
    }
    /**
     * @param {?} from
     * @param {?} name
     * @return {?}
     */
    listen(from, name) {
        return this._e.asObservable().pipe(filter(e => e.from === from && e.name === name), map(e => e.data));
    }
    /**
     * @return {?}
     */
    stop() {
        this._e.complete();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    BusClass.prototype._e;
}
/** @type {?} */
export const Bus = new BusClass();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90b3BweS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQUc3QyxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQWlCLEVBQUUsUUFBc0IsRUFBRTs7UUFDaEUsSUFBSSxzQkFBcUM7SUFFN0MsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUFFLElBQUksaUJBQW1CLENBQUM7U0FDckUsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO1FBQUUsSUFBSSxtQkFBcUIsQ0FBQztTQUN4RCxJQUFJLElBQUksWUFBWSxXQUFXO1FBQUUsSUFBSSxxQkFBdUIsQ0FBQztJQUVsRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUMvQixDQUFDOzs7O0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFO1NBQ2pCLFFBQVEsQ0FBQyxFQUFFLENBQUM7U0FDWixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLENBQUM7Ozs7Ozs7O0FBSUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUF3QixFQUFFLEdBQWEsRUFBRSxTQUFpQixNQUFNO0lBQ3ZGLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDM0QsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLFFBQVE7SUFDNUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQzdFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQWtCOztRQUM5QyxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFO1FBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7S0FDZDtJQUNELE9BQU8sUUFBUSxHQUFHLFFBQVEsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO0FBQzdDLENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLO0lBQ3pDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQztJQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEQsS0FBSyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7O0FBRUQsTUFBTSxPQUFPLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQzs7QUFJcEQsTUFBTSxRQUFRO0lBQWQ7UUFDVSxPQUFFLEdBQXdCLElBQUksT0FBTyxFQUFFLENBQUM7SUFjbEQsQ0FBQzs7Ozs7OztJQWJDLElBQUksQ0FBQyxJQUFZLEVBQUUsSUFBb0IsRUFBRSxPQUFZLElBQUk7UUFDdkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7O0lBQ0QsTUFBTSxDQUFDLElBQVksRUFBRSxJQUFvQjtRQUN2QyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2pCLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGOzs7Ozs7SUFkQyxzQkFBZ0Q7OztBQWVsRCxNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksUUFBUSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udGVudCwgQ29udGVudERhdGEsIENvbnRlbnRQcm9wcywgQ29udGVudFR5cGUsIFRvcHB5RXZlbnQsIFRvcHB5RXZlbnROYW1lIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGVudChkYXRhOiBDb250ZW50RGF0YSwgcHJvcHM6IENvbnRlbnRQcm9wcyA9IHt9KTogQ29udGVudCB7XG4gIGxldCB0eXBlOiBDb250ZW50VHlwZSA9IENvbnRlbnRUeXBlLkNPTVBPTkVOVDtcblxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnICYmIHByb3BzWydoYXNIVE1MJ10pIHR5cGUgPSBDb250ZW50VHlwZS5IVE1MO1xuICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHR5cGUgPSBDb250ZW50VHlwZS5TVFJJTkc7XG4gIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikgdHlwZSA9IENvbnRlbnRUeXBlLlRFTVBMQVRFO1xuXG4gIHJldHVybiB7IGRhdGEsIHR5cGUsIHByb3BzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJZCgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKClcbiAgICAudG9TdHJpbmcoMzYpXG4gICAgLnN1YnN0cigyLCA1KTtcbn1cblxuLyogaHRtbCBkb20gdXRpbHMgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNzc0NsYXNzKG1ldGhvZDogJ2FkZCcgfCAncmVtb3ZlJywgY2xzOiBzdHJpbmdbXSwgdGFyZ2V0OiBzdHJpbmcgPSAnYm9keScpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpLmNsYXNzTGlzdFttZXRob2RdKC4uLmNscyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0NzcyhzdHlsZU9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVPYmopXG4gICAgLm1hcCh4ID0+IGAke3h9OiR7c3R5bGVPYmpbeF19JHt0eXBlb2Ygc3R5bGVPYmpbeF0gPT09ICdudW1iZXInID8gJ3B4JyA6ICcnfWApXG4gICAgLmpvaW4oJzsnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcmNlbnRUb0NzcyhtYXgsIHBlcmNlbnRhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBudW1iZXIgPSBOdW1iZXIocGVyY2VudGFnZS5zbGljZSgwLCAtMSkpO1xuICBpZiAobnVtYmVyID4gMTAwKSB7XG4gICAgbnVtYmVyID0gMTAwO1xuICB9XG4gIHJldHVybiBgY2FsYygke21heH1weCAtICR7MTAwIC0gbnVtYmVyfSUpYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFdIKHNyYywgaG9zdCwga2V5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGhvc3Rba2V5XSA9IHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSkge1xuICAgIHZhbHVlID0gcGVyY2VudFRvQ3NzKHNyY1trZXldLCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBjb25zdCBCb2R5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbi8qIGV2ZW50cyAqL1xuXG5jbGFzcyBCdXNDbGFzcyB7XG4gIHByaXZhdGUgX2U6IFN1YmplY3Q8VG9wcHlFdmVudD4gPSBuZXcgU3ViamVjdCgpO1xuICBzZW5kKGZyb206IHN0cmluZywgbmFtZTogVG9wcHlFdmVudE5hbWUsIGRhdGE6IGFueSA9IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLl9lLm5leHQoeyBmcm9tLCBuYW1lLCBkYXRhIH0pO1xuICB9XG4gIGxpc3Rlbihmcm9tOiBzdHJpbmcsIG5hbWU6IFRvcHB5RXZlbnROYW1lKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fZS5hc09ic2VydmFibGUoKS5waXBlKFxuICAgICAgZmlsdGVyKGUgPT4gZS5mcm9tID09PSBmcm9tICYmIGUubmFtZSA9PT0gbmFtZSksXG4gICAgICBtYXAoZSA9PiBlLmRhdGEpXG4gICAgKTtcbiAgfVxuXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgdGhpcy5fZS5jb21wbGV0ZSgpO1xuICB9XG59XG5leHBvcnQgY29uc3QgQnVzID0gbmV3IEJ1c0NsYXNzKCk7XG4iXX0=