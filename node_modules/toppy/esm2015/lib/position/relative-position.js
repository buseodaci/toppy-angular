/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { OutsidePlacement } from '../models';
import { Bus, setWH } from '../utils';
import { ToppyPosition } from './position';
/**
 * @record
 */
function RelativePositionConfig() { }
if (false) {
    /** @type {?} */
    RelativePositionConfig.prototype.src;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.placement;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.autoUpdate;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.width;
    /** @type {?|undefined} */
    RelativePositionConfig.prototype.height;
}
export class RelativePosition extends ToppyPosition {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = {
            src: null,
            placement: OutsidePlacement.TOP,
            autoUpdate: false,
            width: 'auto',
            height: 'auto'
        };
        this.updateConfig(config);
    }
    /**
     * @param {?} tid
     * @return {?}
     */
    init(tid) {
        if (this.config.autoUpdate)
            this.listenDrag(tid);
    }
    /**
     * @param {?} targetEl
     * @return {?}
     */
    getPositions(targetEl) {
        /** @type {?} */
        const s = this.getCoords(this.config.src);
        /** @type {?} */
        const h = this.getCoords(targetEl);
        let { width: w, height: ht } = this.config;
        w = setWH(s, h, 'width', w);
        ht = setWH(s, h, 'height', ht);
        const { pos, props } = this.calculatePos(this.config.placement, s, h);
        return Object.assign({}, this.round(props), { width: w, height: ht, extra: pos });
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    getCoords(elem) {
        return elem.getBoundingClientRect();
    }
    /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    calc(placement, src, host) {
        const [main, sub] = placement.split('');
        /** @type {?} */
        const p = { left: 0, top: 0 };
        if ((main === 't' || main === 'b') && !sub) {
            p.left = src.left + (src.width - host.width) / 2;
        }
        if ((main === 't' || main === 'b') && sub) {
            p.left = src.left;
        }
        if ((main === 't' || main === 'b') && sub === 'r') {
            p.left = src.left + src.width - host.width;
        }
        if (main === 'l') {
            p.left = src.left - host.width;
        }
        if (main === 'r') {
            p.left = src.right;
        }
        if (main === 't') {
            p.top = src.top - host.height;
        }
        if (main === 'b') {
            p.top = src.top + src.height;
        }
        if (main === 'l' || main === 'r') {
            p.top = src.top + (src.height - host.height) / 2;
        }
        if (sub === 't' && (main === 'l' || main === 'r')) {
            p.top = src.top;
        }
        if (sub === 'b' && (main === 'l' || main === 'r')) {
            p.top = src.top + src.height - host.height;
        }
        return p;
    }
    /**
     * @private
     * @param {?} pos
     * @param {?} s
     * @param {?} h
     * @param {?=} c
     * @return {?}
     */
    calculatePos(pos, s, h, c = true) {
        /** @type {?} */
        const props = this.calc(pos, s, h);
        if (c && this.config.autoUpdate && this.isOverflowed(Object.assign({}, props, { width: h.width, height: h.height }))) {
            return this.calculatePos(this.nextPosition(pos), s, h, false);
        }
        return { pos, props };
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    isOverflowed(props) {
        const { innerHeight, innerWidth } = window;
        props.bottom = props.top + props.height;
        props.right = props.left + props.width;
        return props.bottom > innerHeight || props.top <= 0 || props.left <= 0 || props.right > innerWidth;
    }
    /**
     * @private
     * @param {?} current
     * @return {?}
     */
    nextPosition(current) {
        /** @type {?} */
        const placements = ['t', 'b', 'l', 'r', 'tl', 'bl', 'tr', 'br', 'lt', 'rt', 'lb', 'rb'];
        /** @type {?} */
        const index = placements.indexOf(current);
        /** @type {?} */
        const even = index % 2 === 0;
        return even ? placements[index + 1] : placements[index - 1];
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    round(props) {
        Object.keys(props).forEach(x => (props[x] = Math.round(props[x])));
        return props;
    }
    /**
     * @private
     * @param {?} tid
     * @return {?}
     */
    listenDrag(tid) {
        if (this.obs)
            this.obs.disconnect();
        this.obs = new MutationObserver(mutationsList => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'attributes')
                    Bus.send(tid, 't_dynpos');
            }
        });
        this.obs.observe(this.config.src, {
            attributeFilter: ['style']
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    RelativePosition.prototype.config;
    /** @type {?} */
    RelativePosition.prototype.obs;
}
//# sourceMappingURL=data:application/json;base64,