/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InsidePlacement } from '../models';
import { setWH } from '../utils';
import { ToppyPosition } from './position';
/**
 * @record
 */
function GlobalPositionConfig() { }
if (false) {
    /** @type {?|undefined} */
    GlobalPositionConfig.prototype.placement;
    /** @type {?|undefined} */
    GlobalPositionConfig.prototype.offset;
    /** @type {?|undefined} */
    GlobalPositionConfig.prototype.width;
    /** @type {?|undefined} */
    GlobalPositionConfig.prototype.height;
}
export class GlobalPosition extends ToppyPosition {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = { placement: InsidePlacement.CENTER, width: 100, height: 100, offset: 0 };
        this.updateConfig(config);
    }
    /**
     * @param {?=} hostEl
     * @return {?}
     */
    getPositions(hostEl) {
        /** @type {?} */
        const host = (/** @type {?} */ (hostEl.getBoundingClientRect()));
        /** @type {?} */
        const src = {
            width: window['innerWidth'],
            height: window['innerHeight']
        };
        let { width: w, height: h } = this.config;
        w = setWH(src, host, 'width', w);
        h = setWH(src, host, 'height', h);
        /** @type {?} */
        const props = this.calc(this.config.placement, src, host);
        return Object.assign({}, props, { width: w, height: h, position: 'fixed', extra: this.config.placement });
    }
    /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    calc(placement, src, host) {
        const [main, sub] = placement.split('');
        /** @type {?} */
        const p = {};
        if (main === 't') {
            p.top = this.config.offset;
        }
        if (main === 'b') {
            p.bottom = this.config.offset;
        }
        if ((main === 'l' || main === 'r' || main === 'c') && !sub) {
            p.top = (src.height - host.height) / 2;
        }
        if ((main === 't' || main === 'b' || main === 'c') && !sub) {
            p.left = (src.width - host.width) / 2;
        }
        if ((main === 'l' && !sub) || sub === 'l') {
            p.left = this.config.offset;
        }
        if ((main === 'r' && !sub) || sub === 'r') {
            p.right = this.config.offset;
        }
        return p;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    GlobalPosition.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLXBvc2l0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG9wcHkvIiwic291cmNlcyI6WyJsaWIvcG9zaXRpb24vZ2xvYmFsLXBvc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQUUzQyxtQ0FLQzs7O0lBSkMseUNBQTRCOztJQUM1QixzQ0FBZ0I7O0lBQ2hCLHFDQUF3Qjs7SUFDeEIsc0NBQXlCOztBQUczQixNQUFNLE9BQU8sY0FBZSxTQUFRLGFBQWE7Ozs7SUFHL0MsWUFBWSxNQUE0QjtRQUN0QyxLQUFLLEVBQUUsQ0FBQztRQUhBLFdBQU0sR0FBeUIsRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBSWpILElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFDRCxZQUFZLENBQUMsTUFBb0I7O2NBQ3pCLElBQUksR0FBRyxtQkFBQSxNQUFNLENBQUMscUJBQXFCLEVBQUUsRUFBTzs7Y0FDNUMsR0FBRyxHQUFHO1lBQ1YsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDM0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUM7U0FDOUI7WUFDRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNO1FBRXpDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQzs7Y0FFNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQztRQUN6RCx5QkFDSyxLQUFLLElBQ1IsS0FBSyxFQUFFLENBQUMsRUFDUixNQUFNLEVBQUUsQ0FBQyxFQUNULFFBQVEsRUFBRSxPQUFPLEVBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFDNUI7SUFDSixDQUFDOzs7Ozs7OztJQUVPLElBQUksQ0FBQyxTQUEwQixFQUFFLEdBQUcsRUFBRSxJQUFJO2NBQzFDLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDOztjQUNqQyxDQUFDLEdBQVEsRUFBRTtRQUVqQixJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUM1QjtRQUNELElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRTtZQUNoQixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDMUQsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzFELENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUU7WUFDekMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRTtZQUN6QyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzlCO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0Y7Ozs7OztJQXJEQyxnQ0FBbUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnNpZGVQbGFjZW1lbnQgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgc2V0V0ggfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBUb3BweVBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbic7XG5cbmludGVyZmFjZSBHbG9iYWxQb3NpdGlvbkNvbmZpZyB7XG4gIHBsYWNlbWVudD86IEluc2lkZVBsYWNlbWVudDtcbiAgb2Zmc2V0PzogbnVtYmVyO1xuICB3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcbiAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgR2xvYmFsUG9zaXRpb24gZXh0ZW5kcyBUb3BweVBvc2l0aW9uIHtcbiAgcHJvdGVjdGVkIGNvbmZpZzogR2xvYmFsUG9zaXRpb25Db25maWcgPSB7IHBsYWNlbWVudDogSW5zaWRlUGxhY2VtZW50LkNFTlRFUiwgd2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDAsIG9mZnNldDogMCB9O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogR2xvYmFsUG9zaXRpb25Db25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudXBkYXRlQ29uZmlnKGNvbmZpZyk7XG4gIH1cbiAgZ2V0UG9zaXRpb25zKGhvc3RFbD86IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgaG9zdCA9IGhvc3RFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBhcyBhbnk7XG4gICAgY29uc3Qgc3JjID0ge1xuICAgICAgd2lkdGg6IHdpbmRvd1snaW5uZXJXaWR0aCddLFxuICAgICAgaGVpZ2h0OiB3aW5kb3dbJ2lubmVySGVpZ2h0J11cbiAgICB9O1xuICAgIGxldCB7IHdpZHRoOiB3LCBoZWlnaHQ6IGggfSA9IHRoaXMuY29uZmlnO1xuXG4gICAgdyA9IHNldFdIKHNyYywgaG9zdCwgJ3dpZHRoJywgdyk7XG4gICAgaCA9IHNldFdIKHNyYywgaG9zdCwgJ2hlaWdodCcsIGgpO1xuXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLmNhbGModGhpcy5jb25maWcucGxhY2VtZW50LCBzcmMsIGhvc3QpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIHdpZHRoOiB3LFxuICAgICAgaGVpZ2h0OiBoLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICBleHRyYTogdGhpcy5jb25maWcucGxhY2VtZW50XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsYyhwbGFjZW1lbnQ6IEluc2lkZVBsYWNlbWVudCwgc3JjLCBob3N0KSB7XG4gICAgY29uc3QgW21haW4sIHN1Yl0gPSBwbGFjZW1lbnQuc3BsaXQoJycpO1xuICAgIGNvbnN0IHA6IGFueSA9IHt9O1xuXG4gICAgaWYgKG1haW4gPT09ICd0Jykge1xuICAgICAgcC50b3AgPSB0aGlzLmNvbmZpZy5vZmZzZXQ7XG4gICAgfVxuICAgIGlmIChtYWluID09PSAnYicpIHtcbiAgICAgIHAuYm90dG9tID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoKG1haW4gPT09ICdsJyB8fCBtYWluID09PSAncicgfHwgbWFpbiA9PT0gJ2MnKSAmJiAhc3ViKSB7XG4gICAgICBwLnRvcCA9IChzcmMuaGVpZ2h0IC0gaG9zdC5oZWlnaHQpIC8gMjtcbiAgICB9XG5cbiAgICBpZiAoKG1haW4gPT09ICd0JyB8fCBtYWluID09PSAnYicgfHwgbWFpbiA9PT0gJ2MnKSAmJiAhc3ViKSB7XG4gICAgICBwLmxlZnQgPSAoc3JjLndpZHRoIC0gaG9zdC53aWR0aCkgLyAyO1xuICAgIH1cbiAgICBpZiAoKG1haW4gPT09ICdsJyAmJiAhc3ViKSB8fCBzdWIgPT09ICdsJykge1xuICAgICAgcC5sZWZ0ID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoKG1haW4gPT09ICdyJyAmJiAhc3ViKSB8fCBzdWIgPT09ICdyJykge1xuICAgICAgcC5yaWdodCA9IHRoaXMuY29uZmlnLm9mZnNldDtcbiAgICB9XG5cbiAgICByZXR1cm4gcDtcbiAgfVxufVxuIl19