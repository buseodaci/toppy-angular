import { TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, Injector, ViewChild, ViewContainerRef, ApplicationRef, Injectable, defineInjectable, inject, INJECTOR, NgModule } from '@angular/core';
import { Subject, animationFrameScheduler, fromEvent, merge } from 'rxjs';
import { filter, map, startWith, takeUntil, tap, debounceTime, distinctUntilChanged, observeOn, skipWhile } from 'rxjs/operators';
import { __rest } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const p = {
    TOP: 't',
    LEFT: 'l',
    RIGHT: 'r',
    BOTTOM: 'b',
    TOP_LEFT: 'tl',
    TOP_RIGHT: 'tr',
    BOTTOM_LEFT: 'bl',
    BOTTOM_RIGHT: 'br',
};
/** @enum {string} */
const o = {
    LEFT_TOP: 'lt',
    RIGHT_TOP: 'rt',
    LEFT_BOTTOM: 'lb',
    RIGHT_BOTTOM: 'rb',
};
/** @enum {string} */
const i = {
    CENTER: 'c',
};
/** @type {?} */
const OutsidePlacement = Object.assign({}, p, o);
/** @type {?} */
const InsidePlacement = Object.assign({}, p, i);
/** @enum {string} */
const SlidePlacement = {
    LEFT: 'l',
    RIGHT: 'r',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class ToppyPosition {
    constructor() {
        this.config = {};
    }
    /**
     * @return {?}
     */
    getClassName() {
        return this.constructor.name.replace('Pos', '-pos').toLowerCase();
    }
    /**
     * @param {?} config
     * @return {?}
     */
    updateConfig(config) {
        this.config = Object.assign({}, this.config, config);
    }
    /**
     * @param {?} tid
     * @return {?}
     */
    init(tid) { }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FullscreenPosition extends ToppyPosition {
    /**
     * @return {?}
     */
    getPositions() {
        return { top: 0, left: 0, width: '100%', height: '100%', position: 'fixed' };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} data
 * @param {?=} props
 * @return {?}
 */
function getContent(data, props = {}) {
    /** @type {?} */
    let type = "c" /* COMPONENT */;
    if (typeof data === 'string' && props['hasHTML'])
        type = "h" /* HTML */;
    else if (typeof data === 'string')
        type = "s" /* STRING */;
    else if (data instanceof TemplateRef)
        type = "t" /* TEMPLATE */;
    return { data, type, props };
}
/**
 * @return {?}
 */
function createId() {
    return Math.random()
        .toString(36)
        .substr(2, 5);
}
/* html dom utils */
/**
 * @param {?} method
 * @param {?} cls
 * @param {?=} target
 * @return {?}
 */
function cssClass(method, cls, target = 'body') {
    document.querySelector(target).classList[method](...cls);
}
/**
 * @param {?} styleObj
 * @return {?}
 */
function toCss(styleObj) {
    return Object.keys(styleObj)
        .map(x => `${x}:${styleObj[x]}${typeof styleObj[x] === 'number' ? 'px' : ''}`)
        .join(';');
}
/**
 * @param {?} max
 * @param {?} percentage
 * @return {?}
 */
function percentToCss(max, percentage) {
    /** @type {?} */
    let number = Number(percentage.slice(0, -1));
    if (number > 100) {
        number = 100;
    }
    return `calc(${max}px - ${100 - number}%)`;
}
/**
 * @param {?} src
 * @param {?} host
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function setWH(src, host, key, value) {
    if (typeof value === 'number') {
        host[key] = value = Math.abs(value);
    }
    if (typeof value === 'string' && value.endsWith('%')) {
        value = percentToCss(src[key], value);
    }
    return value;
}
/** @type {?} */
const BodyEl = document.querySelector('body');
/* events */
class BusClass {
    constructor() {
        this._e = new Subject();
    }
    /**
     * @param {?} from
     * @param {?} name
     * @param {?=} data
     * @return {?}
     */
    send(from, name, data = null) {
        this._e.next({ from, name, data });
    }
    /**
     * @param {?} from
     * @param {?} name
     * @return {?}
     */
    listen(from, name) {
        return this._e.asObservable().pipe(filter(e => e.from === from && e.name === name), map(e => e.data));
    }
    /**
     * @return {?}
     */
    stop() {
        this._e.complete();
    }
}
/** @type {?} */
const Bus = new BusClass();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GlobalPosition extends ToppyPosition {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = { placement: InsidePlacement.CENTER, width: 100, height: 100, offset: 0 };
        this.updateConfig(config);
    }
    /**
     * @param {?=} hostEl
     * @return {?}
     */
    getPositions(hostEl) {
        /** @type {?} */
        const host = (/** @type {?} */ (hostEl.getBoundingClientRect()));
        /** @type {?} */
        const src = {
            width: window['innerWidth'],
            height: window['innerHeight']
        };
        let { width: w, height: h } = this.config;
        w = setWH(src, host, 'width', w);
        h = setWH(src, host, 'height', h);
        /** @type {?} */
        const props = this.calc(this.config.placement, src, host);
        return Object.assign({}, props, { width: w, height: h, position: 'fixed', extra: this.config.placement });
    }
    /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    calc(placement, src, host) {
        const [main, sub] = placement.split('');
        /** @type {?} */
        const p = {};
        if (main === 't') {
            p.top = this.config.offset;
        }
        if (main === 'b') {
            p.bottom = this.config.offset;
        }
        if ((main === 'l' || main === 'r' || main === 'c') && !sub) {
            p.top = (src.height - host.height) / 2;
        }
        if ((main === 't' || main === 'b' || main === 'c') && !sub) {
            p.left = (src.width - host.width) / 2;
        }
        if ((main === 'l' && !sub) || sub === 'l') {
            p.left = this.config.offset;
        }
        if ((main === 'r' && !sub) || sub === 'r') {
            p.right = this.config.offset;
        }
        return p;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RelativePosition extends ToppyPosition {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = {
            src: null,
            placement: OutsidePlacement.TOP,
            autoUpdate: false,
            width: 'auto',
            height: 'auto'
        };
        this.updateConfig(config);
    }
    /**
     * @param {?} tid
     * @return {?}
     */
    init(tid) {
        if (this.config.autoUpdate)
            this.listenDrag(tid);
    }
    /**
     * @param {?} targetEl
     * @return {?}
     */
    getPositions(targetEl) {
        /** @type {?} */
        const s = this.getCoords(this.config.src);
        /** @type {?} */
        const h = this.getCoords(targetEl);
        let { width: w, height: ht } = this.config;
        w = setWH(s, h, 'width', w);
        ht = setWH(s, h, 'height', ht);
        const { pos, props } = this.calculatePos(this.config.placement, s, h);
        return Object.assign({}, this.round(props), { width: w, height: ht, extra: pos });
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    getCoords(elem) {
        return elem.getBoundingClientRect();
    }
    /**
     * @private
     * @param {?} placement
     * @param {?} src
     * @param {?} host
     * @return {?}
     */
    calc(placement, src, host) {
        const [main, sub] = placement.split('');
        /** @type {?} */
        const p = { left: 0, top: 0 };
        if ((main === 't' || main === 'b') && !sub) {
            p.left = src.left + (src.width - host.width) / 2;
        }
        if ((main === 't' || main === 'b') && sub) {
            p.left = src.left;
        }
        if ((main === 't' || main === 'b') && sub === 'r') {
            p.left = src.left + src.width - host.width;
        }
        if (main === 'l') {
            p.left = src.left - host.width;
        }
        if (main === 'r') {
            p.left = src.right;
        }
        if (main === 't') {
            p.top = src.top - host.height;
        }
        if (main === 'b') {
            p.top = src.top + src.height;
        }
        if (main === 'l' || main === 'r') {
            p.top = src.top + (src.height - host.height) / 2;
        }
        if (sub === 't' && (main === 'l' || main === 'r')) {
            p.top = src.top;
        }
        if (sub === 'b' && (main === 'l' || main === 'r')) {
            p.top = src.top + src.height - host.height;
        }
        return p;
    }
    /**
     * @private
     * @param {?} pos
     * @param {?} s
     * @param {?} h
     * @param {?=} c
     * @return {?}
     */
    calculatePos(pos, s, h, c = true) {
        /** @type {?} */
        const props = this.calc(pos, s, h);
        if (c && this.config.autoUpdate && this.isOverflowed(Object.assign({}, props, { width: h.width, height: h.height }))) {
            return this.calculatePos(this.nextPosition(pos), s, h, false);
        }
        return { pos, props };
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    isOverflowed(props) {
        const { innerHeight, innerWidth } = window;
        props.bottom = props.top + props.height;
        props.right = props.left + props.width;
        return props.bottom > innerHeight || props.top <= 0 || props.left <= 0 || props.right > innerWidth;
    }
    /**
     * @private
     * @param {?} current
     * @return {?}
     */
    nextPosition(current) {
        /** @type {?} */
        const placements = ['t', 'b', 'l', 'r', 'tl', 'bl', 'tr', 'br', 'lt', 'rt', 'lb', 'rb'];
        /** @type {?} */
        const index = placements.indexOf(current);
        /** @type {?} */
        const even = index % 2 === 0;
        return even ? placements[index + 1] : placements[index - 1];
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    round(props) {
        Object.keys(props).forEach(x => (props[x] = Math.round(props[x])));
        return props;
    }
    /**
     * @private
     * @param {?} tid
     * @return {?}
     */
    listenDrag(tid) {
        if (this.obs)
            this.obs.disconnect();
        this.obs = new MutationObserver(mutationsList => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'attributes')
                    Bus.send(tid, 't_dynpos');
            }
        });
        this.obs.observe(this.config.src, {
            attributeFilter: ['style']
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SlidePosition extends ToppyPosition {
    /**
     * @param {?} config
     */
    constructor(config) {
        super();
        this.config = { placement: SlidePlacement.LEFT, width: '30%' };
        this.config = Object.assign({}, this.config, config);
    }
    /**
     * @return {?}
     */
    getPositions() {
        /** @type {?} */
        const props = this.config.placement === SlidePlacement.LEFT ? { left: 0 } : { right: 0 };
        return Object.assign({}, props, { top: 0, width: this.config.width, height: '100%', position: 'fixed', extra: this.config.placement });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DefaultConfig = {
    containerClass: 't-overlay',
    bodyClass: 't-open',
    wrapperClass: '',
    backdropClass: '',
    backdrop: false,
    closeOnDocClick: false,
    listenWindowEvents: true,
    closeOnEsc: false,
    windowResizeCallback: () => { },
    docClickCallback: () => { }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToppyComponent {
    /**
     * @param {?} inj
     * @param {?} cd
     * @param {?} compResolver
     * @param {?} elRef
     */
    constructor(inj, cd, compResolver, elRef) {
        this.inj = inj;
        this.cd = cd;
        this.compResolver = compResolver;
        this.elRef = elRef;
        this.content = {
            type: "s" /* STRING */,
            data: '',
            props: {}
        };
        this.die = new Subject();
        this.pinj = Injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.el = this.elRef.nativeElement;
        this.wrapperEl = this.el.querySelector('.t-wrapper');
        /** @type {?} */
        let cls = ['t-container', this.config.containerClass, this.position.getClassName()];
        if (this.config.closeOnDocClick) {
            cls = cls.concat(['no-pointers']);
        }
        this.el.setAttribute('data-tid', this.tid);
        cssClass('add', cls, `[data-tid='${[this.tid]}']`);
        cssClass('add', [this.config.bodyClass]);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.listenPos().subscribe();
        if (this.content.type === "c" /* COMPONENT */) {
            this.compInstance = this.setComponent(this.content.props);
            Bus.send(this.tid, 't_compins', this.compInstance);
        }
    }
    /**
     * @param {?} props
     * @return {?}
     */
    setComponent(props) {
        /** @type {?} */
        const compRef = this.compOutlet.createComponent(this.compResolver.resolveComponentFactory((/** @type {?} */ (this.content.data))));
        Object.assign(compRef.instance, props);
        compRef.changeDetectorRef.detectChanges();
        return compRef.instance;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateTextContent(data) {
        if (this.content.type === "s" /* STRING */) {
            this.content.data = data;
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        cssClass('remove', [this.config.bodyClass]);
        this.die.next(1);
        Bus.send(this.tid, 't_detach');
    }
    /**
     * @private
     * @return {?}
     */
    listenPos() {
        return Bus.listen(this.tid, 't_dynpos').pipe(startWith(1), takeUntil(this.die), tap(e => {
            if (!e || !e.x)
                return this.setPos();
            /** @type {?} */
            const coords = { left: e.x, top: e.y };
            this.wrapperEl.style = toCss(coords);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setPos() {
        const _a = this.position.getPositions(this.wrapperEl), { extra } = _a, coords = __rest(_a, ["extra"]);
        if (this.extra !== extra) {
            this.extra = extra;
            this.cd.detectChanges();
        }
        Object.assign(coords, { visibility: 'visible', opacity: '1' });
        this.wrapperEl.style = toCss(coords);
        Bus.send(this.tid, 't_posupdate');
    }
}
ToppyComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'toppy',
                template: "<div class=\"t-backdrop\" *ngIf=\"config.backdrop\" [ngClass]=\"config.backdropClass\"></div>\n<div class=\"t-wrapper\" [ngClass]=\"config.wrapperClass\" [class]=\"extra\" #wrapperEl>\n  <ng-container [ngSwitch]=\"content.type\">\n    <ng-container *ngSwitchCase=\"'s'\">\n      <div [class]=\"content.props.class\">{{ content.data }}</div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'h'\"> <div [innerHTML]=\"content.data\"></div> </ng-container>\n    <ng-container *ngSwitchCase=\"'t'\">\n      <ng-container *ngTemplateOutlet=\"content.data; context: { $implicit: content.props }\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'c'\"> <ng-template #compOutlet></ng-template> </ng-container>\n  </ng-container>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{left:0;position:fixed;top:0;width:100%;height:100%;pointer-events:none}:host.no-pointers{pointer-events:all}:host .t-backdrop{left:0;position:fixed;top:0;width:100%;height:100%;background:rgba(0,0,0,.5)}:host>div.t-wrapper{position:absolute;visibility:hidden;opacity:0;transition:opacity .2s;overflow:hidden;pointer-events:all}"]
            }] }
];
/** @nocollapse */
ToppyComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: ElementRef }
];
ToppyComponent.propDecorators = {
    compOutlet: [{ type: ViewChild, args: ['compOutlet', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToppyControl {
    /**
     * @param {?} appRef
     * @param {?} compResolver
     * @param {?} injector
     */
    constructor(appRef, compResolver, injector) {
        this.appRef = appRef;
        this.compResolver = compResolver;
        this.injector = injector;
        this.updateTextContent = new Subject();
        this.isOpen = false;
        this.die = new Subject();
        this.updateTextContent.subscribe(content => {
            if (this.isOpen)
                this.comp.updateTextContent(content);
        });
    }
    /**
     * @return {?}
     */
    open() {
        if (this.isOpen)
            return;
        this.attach();
        if (this.viewEl) {
            merge(this.onDocumentClick(), this.onWindowResize(), this.onEscClick()).subscribe();
            setTimeout(() => Bus.send(this.tid, 't_dynpos'), 1);
        }
        Bus.send(this.tid, 't_open');
        this.isOpen = true;
    }
    /**
     * @return {?}
     */
    close() {
        if (!this.isOpen)
            return;
        this.dettach();
        this.die.next(1);
        Bus.send(this.tid, 't_close');
        this.isOpen = false;
    }
    /**
     * @return {?}
     */
    toggle() {
        return this.isOpen ? this.close() : this.open();
    }
    /**
     * @return {?}
     */
    onEscClick() {
        return fromEvent(BodyEl, 'keydown').pipe(takeUntil(this.die), skipWhile(() => !this.config.closeOnEsc), filter((e) => (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && e.target.nodeName === 'BODY'), tap(e => e.preventDefault()), map(e => e.target), tap(() => this.close()));
    }
    /**
     * @return {?}
     */
    onDocumentClick() {
        return fromEvent(this.viewEl, 'click').pipe(takeUntil(this.die), map((e) => e.target), skipWhile(() => !this.config.closeOnDocClick), filter(this.isNotHostElement.bind(this)), tap(() => {
            this.config.docClickCallback();
            this.close();
        }));
    }
    /**
     * @return {?}
     */
    onWindowResize() {
        /** @type {?} */
        const onResize = fromEvent(window, 'resize');
        /** @type {?} */
        const onScroll = fromEvent(window, 'scroll', { passive: true });
        return merge(onResize, onScroll).pipe(skipWhile(() => !this.config.listenWindowEvents), takeUntil(this.die), debounceTime(5), observeOn(animationFrameScheduler), distinctUntilChanged(), tap(() => {
            Bus.send(this.tid, 't_dynpos');
            this.config.windowResizeCallback();
        }));
    }
    /**
     * @param {?} newPosition
     * @return {?}
     */
    changePosition(newPosition) {
        this.position = newPosition;
    }
    /**
     * @param {?} positionConfig
     * @return {?}
     */
    updatePosition(positionConfig) {
        this.position.updateConfig(positionConfig);
    }
    /**
     * @param {?} content
     * @param {?=} props
     * @return {?}
     */
    updateContent(content, props = {}) {
        this.content = getContent(content, Object.assign({}, this.content.props, props));
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    listen(eventName) {
        return Bus.listen(this.tid, eventName);
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    isNotHostElement(el) {
        /** @type {?} */
        const wrapperEl = this.viewEl.querySelector('.t-wrapper');
        return el !== wrapperEl && !wrapperEl.contains(el);
    }
    /**
     * @private
     * @return {?}
     */
    attach() {
        /* create component */
        this.compFac = this.compResolver.resolveComponentFactory(ToppyComponent);
        this.compRef = this.compFac.create(this.injector);
        this.comp = this.compRef.instance;
        /* assign props */
        const { position, content, config, tid } = this;
        content.props.close = this.close.bind(this);
        Object.assign(this.comp, { position, content, config, tid });
        /* attach view */
        this.hostView = this.compRef.hostView;
        this.appRef.attachView(this.hostView);
        this.viewEl = ((/** @type {?} */ (this.hostView))).rootNodes[0];
        BodyEl.appendChild(this.viewEl);
    }
    /**
     * @private
     * @return {?}
     */
    dettach() {
        if (!this.hostView)
            return;
        this.appRef.detachView(this.hostView);
        this.compRef.destroy();
        this.hostView = this.viewEl = this.comp = null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Toppy {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.inputs = {
            position: null,
            config: DefaultConfig,
            content: { type: "s" /* STRING */, data: 'hello', props: {} },
            tid: null
        };
        this.inputs.position = new GlobalPosition({ placement: InsidePlacement.TOP });
    }
    /**
     * @param {?} position
     * @return {?}
     */
    position(position) {
        this.inputs.position = position;
        return this;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    config(config) {
        this.inputs.config = Object.assign({}, DefaultConfig, config);
        return this;
    }
    /**
     * @param {?} data
     * @param {?=} props
     * @return {?}
     */
    content(data, props = {}) {
        this.inputs.content = getContent(data, props);
        return this;
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    create(key = null) {
        this.tid = this.inputs.tid = key || createId();
        /** @type {?} */
        const injector = Injector.create([
            {
                provide: ToppyControl,
                deps: [ApplicationRef, ComponentFactoryResolver, Injector]
            }
        ], this.injector);
        /** @type {?} */
        const tc = injector.get(ToppyControl);
        if (Toppy.controls[this.tid]) {
            this.tid = createId();
        }
        this.inputs.position.init(this.tid);
        Toppy.controls[this.tid] = Object.assign(tc, this.inputs);
        return tc;
    }
    /**
     * @param {?} tid
     * @return {?}
     */
    getCtrl(tid) {
        return Toppy.controls[tid];
    }
    /**
     * @return {?}
     */
    destroy() {
        // tslint:disable-next-line:forin
        for (const key in Toppy.controls) {
            Toppy.controls[key].close();
        }
        Toppy.controls = {};
        Bus.stop();
    }
}
Toppy.controls = {};
Toppy.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
Toppy.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ Toppy.ngInjectableDef = defineInjectable({ factory: function Toppy_Factory() { return new Toppy(inject(INJECTOR)); }, token: Toppy, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToppyModule {
}
ToppyModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ToppyComponent],
                entryComponents: [ToppyComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { InsidePlacement, OutsidePlacement, SlidePlacement, FullscreenPosition, GlobalPosition, RelativePosition, SlidePosition, Toppy, ToppyControl, ToppyModule, ToppyComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,